// –ü–æ–¥–∫–ª—é—á–∞–µ–º SDK
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand(); // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

function setupOrderButtons() {
  const buttons = document.querySelectorAll('button');

  buttons.forEach(button => {
    if (button.textContent.includes("üõí –ó–∞–∫–∞–∑–∞—Ç—å")) {
      button.addEventListener('click', async () => {
        const container = button.parentElement;

        const product = container.querySelector('div').textContent.trim();
        const priceText = [...container.querySelectorAll('div')].find(el => el.textContent.includes("–¶–µ–Ω–∞"));
        const price = priceText ? parseInt(priceText.textContent.replace('üí∞ –¶–µ–Ω–∞:', '').trim()) : 0;
        const quantity = parseInt(container.querySelector('input[type="number"]').value || "1");
        const total = price * quantity;

        const user = tg.initDataUnsafe.user || {};

        const data = {
          product,
          price,
          quantity,
          total,
          user: {
            id: user.id,
            first_name: user.first_name,
            username: user.username || '–Ω–µ—Ç username'
          }
        };

        try {
          const res = await fetch('/order', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          });

          if (res.ok) {
            tg.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
          } else {
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞');
          }
        } catch (err) {
          alert('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
          console.error(err);
        }
      });
    }
  });
}

window.onload = setupOrderButtons;
